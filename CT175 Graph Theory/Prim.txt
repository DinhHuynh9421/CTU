#include <stdio.h>
#define MAX_N 100
#define NO_EDGE -1
typedef struct {
	int A[MAX_N][MAX_N];
	int n, m;
}Graph;

void init_graph(Graph *G, int n){
	G->n = n;
	G->m=0;
	int u, v;
	for(u=1; u<=n; u++)
	 for(v=1; v<=n; v++)
	  G->A[u][v] = NO_EDGE;
}

void add_edge(Graph *G, int u, int v, int w){
	G->A[u][v] = w;
	G->A[v][u] = w;
	G->m++;
}

#define oo 999999
int pi[MAX_N], p[MAX_N], mark[MAX_N];

int Prim(Graph *G, Graph *T, int x){
	int u, v, i;
	for(u =1; u<=G->n; u++){
		mark[u]=0;
		pi[u] = oo;
		p[u]= -1;
	}
	pi[x] = 0;
	
	for(i=1; i<G->n; i++){
		int min_dist = oo;
		for(v=1; v<= G->n;v++)
		 if(mark[v]==0 && pi[v] < min_dist){
		 	min_dist = pi[v];
		 	u = v;
		 }
		 mark[u] = 1;
		 
		 for(v=1; v<=G->n; v++)
		  if(G->A[u][v]!=NO_EDGE && mark[v]==0)
		   if(G->A[u][v] <pi[v]){
		   	  pi[v] = G->A[u][v];
		   	  p[v] = u;
		   }
	}
	init_graph(T, G->n);
	int sum_w = 0;
	for(u=1; u<=G->n; u++)
	  if(p[u]!= -1){
	  	 add_edge(T, p[u], u, G->A[p[u]][u]);
	  	 sum_w += G->A[p[u]][u];
	  }
	  return sum_w;
}

int main(){
	/*freopen("dt.txt", "r", stdin); //Khi n?p bài nh? b? dòng này.
	Graph G;
	int n, m, u, v, w, e;
	scanf("%d%d", &n, &m);
	init_graph(&G, n);
	
	for (e = 0; e < m; e++) {
		scanf("%d%d%d", &u, &v, &w);
		add_edge(&G, u, v, w);
	}
*/
    freopen("dt.txt", "r", stdin);
	Graph G, T;
	int n, m, u, v, w, e;
	FILE *f = fopen("Kruscal_dt_130.txt" , "r");
	fscanf(f, "%d%d", &n, &m);
	init_graph(&G, n);
	
	for(e=1;e<=m; e++){
		fscanf(f,"%d%d%d", &u, &v, &w);
		add_edge(&G, u, v, w);
	}
	int sum = Prim(&G, &T, 1);
	printf("%d", sum);
	for(u=1; u<=T.n; u++)
	 for(v=u+1; v<=T.n;v++)
	  if(T.A[u][v]!=NO_EDGE)
	   printf("\n%d %d %d", u, v, T.A[u][v]);
	   
	   fclose(f);
	   return 0;
}
